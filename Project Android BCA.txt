### Project Android BCA (Sumana, Srilekha, Diya, Arindam)

Name : Book buddy

Features:
   - Admin
	-- User details
	-- Add books
	-- Add Question papers
	-- Approved by admin when books are added by users * 
	-- 
   - User
	-- Account create 
	-- Add books
	-- Read books
	-- Add review of books
	-- Liked books
	-- Search books
	-- Request for books
	-- See question papers *
	-- Add notes to the diary
	-- Add Blogs (Any types)


Technology use:
  - React Native [Expo]  --------> App Framework
  - Node with Express.JS --------> Backend and API creation
  - MongoDB  --------------------> DB connection
  - Bcrypt.JS -------------------> Password Hashing
  - Socket.io -------------------> Realtime communication
  - Cloudinary ------------------> Storage 
  - Nodemailer ------------------> Mail service
  - Zod -------------------------> Validation 
  - Zustand  --------------------> State Management
  - NativeWind ------------------> CSS library
  - Expo Icons ------------------> Icon packs
  - Lottie files ----------------> Animated files



 ------------------------------- Database ---------------------

 tables -->
   
   - Admins
  1.Users
      - name 
	  - email 
	  - password 
	  - profile-pic
	  - role : "admin" , "user"
	  

  2.categoris (Srilekha)
     - name : unique        
	 - description
	 - user 


   3.Books(complete)
      - name
	  - Pdf
	     -url
		 -public-id
	  - categoris
	  - description 
	  - autherName 
	  - publiceDate 
	  - rating  
	  - likes : [ 
		-userId
	    ]
	  - ratings :
	    [
		 - userId
		]
	  

    4.Reviews (Srilekha)
	  -user
	  -book 
	  -blog
	  -reviewType : "book" , "blog"
	  -message 
	  -rating

	5.Requests (Sumana) 
	  - userId
	  - bookName 
	  - autherName
	  - status : "panding" , "fullfil" , "reject"
	
	6.Blogs (Arindam)
	  - user
	  - title 
	  - description
	  - image 
	     - url
		 - public-id
	
    7.Notes (Diye)
	   - user
	   - title
	   - message
	   - date 
	
	8.report (Diya)
	  - type : 
	  - description
	  - reportType : ["blog" , "book"]
	  - book : bookId 
	  - blog : blogId 
	  



-------------------------------- API creation -------------------------



    steps for create API

     step1 : - route create 
	 step2 : - add validation 
	 step3 : - create controller 
	 step4 : - add service



   1.----------------categoris---------------------- 
      
	  1.add categoris 
	    - authenticate 
		- body : {
			name : string , trim , required 
			description : string , trim , required 
		    user : userId , string , trim , required
		}
		- save on categoris table 
	
	  2. categoris edit option 
	    - authenticate ,
		- admin can edit 
		- body :{
            name : ,
			description : ,
		}
		- params : categorisId

	  3. categoris delete API 
	    - authenticate
		- admin can delete

	  4. fetch All categoris


	2.---------------------- Notes  ------------------------------ 
	   1. create notes 
	     - user authenticate 
		 - body :{
             title : string , trim , min(3) , max(100)
			 message : string , trim , max(1500)
		 }
      
	   2. delete notes 
	     - authenticate
		 - params : noteId

        3. edit notes
		  - authenticate
		  - body :{
             title : string , trim , min(3) , max(100)
			 message : string , trim , max(1500)
		  }
		  - params : noteId

		4. fetch all notes
		  - authenticate 
		  - params : userId
		   await User.find({ user : userId })


	3.---------------------- Blogs  ------------------------------ 
	   1. create Blogs 
	     - user authenticate 
		 - body :{
             title : string , trim , min(3) , max(100)
			 message : string , trim , max(1500)
             image : string , trim , optional 
		 }
      
	   2. delete blogs 
	     - authenticate
		 - params : blogsId

        3. edit blogs
		  - authenticate
		  - body :{
             title : string , trim , min(3) , max(100)
			 message : string , trim , max(1500)
			  image : string , trim , optional 
		  }
		  - params : blogId

		4. fetch all blogs
	
	4. --------------------- Requst Model -------------------------------

	  1. create request 
	   -Validation - {
		 name : string , trim , required ,
		 autherName : string , trim , optional ,
		 category : string , trim , required
	   }
	   -authenticate
	   -save on request model , (status: pending  , user : req.user._id , req.body )
	    

	2. get all request

	-authenticate
	

	3. update request
	 -authenticate
	 -Validation - 
	  body :{
		 name : string , trim , required ,
		 autherName : string , trim , optional ,
		 category : string , trim , required
	   }
	   params : requestId
    - update request if status is pending 

    4. delete request 
	 -authenticate
	 -validation:
	 params:{
       requestId 
	 }

	5.